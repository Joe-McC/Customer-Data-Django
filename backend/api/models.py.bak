# models.py

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils import timezone
import uuid
from django.conf import settings
class Organization(models.Model):
    """Organization/company using the system"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255)
    address = models.TextField(blank=True)
    registration_number = models.CharField(max_length=100, blank=True)
    industry = models.CharField(max_length=100, choices=[
        ('legal', 'Legal Services'),
        ('accounting', 'Accounting'),
        ('consulting', 'Consulting'),
        ('financial_advisory', 'Financial Advisory'),
        ('other', 'Other Professional Services')
    ])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.name

class User(AbstractUser):
    """Extended user model"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey('Organization', on_delete=models.CASCADE, related_name='users')
    job_title = models.CharField(max_length=100, blank=True)
    is_admin = models.BooleanField(default=False)
    is_data_processor = models.BooleanField(default=False)
    
    # Add these lines to fix the conflict
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='api_user_groups',  # This is the key change
        blank=True,
        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
        verbose_name='groups',
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='api_user_permissions',  # This is the key change
        blank=True,
        help_text='Specific permissions for this user.',
        verbose_name='user permissions',
    )
    
    def __str__(self):
        return f"{self.username} ({self.organization.name})"

class DataCategory(models.Model):
    """Categories of personal data"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='data_categories')
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    is_sensitive = models.BooleanField(default=False)
    retention_period_days = models.IntegerField(default=365)
    legal_basis = models.CharField(max_length=100, choices=[
        ('consent', 'Consent'),
        ('contract', 'Contract Performance'),
        ('legal_obligation', 'Legal Obligation'),
        ('vital_interests', 'Vital Interests'),
        ('public_interest', 'Public Interest'),
        ('legitimate_interests', 'Legitimate Interests')
    ])
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} ({self.organization.name})"
    
    class Meta:
        verbose_name_plural = 'Data Categories'


class DataStorage(models.Model):
    """Locations where data is stored"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='data_storages')
    name = models.CharField(max_length=255)
    storage_type = models.CharField(max_length=100, choices=[
        ('internal_db', 'Internal Database'),
        ('cloud', 'Cloud Storage'),
        ('saas', 'SaaS Application'),
        ('paper', 'Paper Records'),
        ('other', 'Other')
    ])
    description = models.TextField(blank=True)
    location = models.CharField(max_length=255, blank=True)
    is_outside_eea = models.BooleanField(default=False)
    security_measures = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} ({self.organization.name})"
    
    class Meta:
        verbose_name_plural = 'Data Storages'


class DataMapping(models.Model):
    """Maps relationships between data categories and storage locations"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='data_mappings')
    data_category = models.ForeignKey(DataCategory, on_delete=models.CASCADE, related_name='mappings')
    storage = models.ForeignKey(DataStorage, on_delete=models.CASCADE, related_name='mappings')
    purpose = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.data_category.name} in {self.storage.name}"


class DataSubjectRequest(models.Model):
    """Tracks GDPR data subject requests (DSR)"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='subject_requests')
    request_type = models.CharField(max_length=100, choices=[
        ('access', 'Right to Access'),
        ('rectification', 'Right to Rectification'),
        ('erasure', 'Right to Erasure'),
        ('restriction', 'Right to Restrict Processing'),
        ('portability', 'Right to Data Portability'),
        ('objection', 'Right to Object'),
        ('not_automated', 'Right Not to be Subject to Automated Decision-Making')
    ])
    data_subject_name = models.CharField(max_length=255)
    data_subject_email = models.EmailField()
    request_details = models.TextField()
    date_received = models.DateTimeField(default=timezone.now)
    status = models.CharField(max_length=100, choices=[
        ('new', 'New'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('denied', 'Denied')
    ], default='new')
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='assigned_requests')
    due_date = models.DateTimeField()
    completed_date = models.DateTimeField(null=True, blank=True)
    notes = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.request_type} request from {self.data_subject_name}"
    
    def save(self, *args, **kwargs):
        # Set due date to 30 days after request if not set
        if not self.due_date:
            self.due_date = self.date_received + timezone.timedelta(days=30)
        super().save(*args, **kwargs)


class Document(models.Model):
    """Compliance documents and templates"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='documents')
    title = models.CharField(max_length=255)
    document_type = models.CharField(max_length=100, choices=[
        ('privacy_policy', 'Privacy Policy'),
        ('consent_form', 'Consent Form'),
        ('dpa', 'Data Processing Agreement'),
        ('dpia', 'Data Protection Impact Assessment'),
        ('record_processing', 'Record of Processing Activities'),
        ('breach_notification', 'Breach Notification Template'),
        ('subject_access_response', 'Subject Access Request Response'),
        ('erasure_confirmation', 'Right to Erasure Confirmation'),
        ('data_portability', 'Data Portability Export'),
        ('other', 'Other Document')
    ])
    is_template = models.BooleanField(default=False)
    content = models.TextField(blank=True)
    template_variables = models.JSONField(null=True, blank=True, 
                                         help_text="JSON specification of variables used in template")
    file = models.FileField(upload_to='documents/', blank=True)
    version = models.CharField(max_length=50, default='1.0')
    status = models.CharField(max_length=100, choices=[
        ('draft', 'Draft'),
        ('active', 'Active'),
        ('archived', 'Archived')
    ], default='draft')
    review_date = models.DateField(null=True, blank=True)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='created_documents')
    # Link to data subject if applicable (e.g., for generated subject-specific documents)
    data_subject = models.ForeignKey('DataSubject', on_delete=models.SET_NULL, null=True, blank=True, related_name='documents')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.title} (v{self.version})"
        
    def generate_document_for_subject(self, data_subject):
        """Generate a new document instance for a specific data subject from this template"""
        if not self.is_template:
            raise ValueError("Cannot generate a document from a non-template")
            
        # Create a new document based on this template
        new_doc = Document.objects.create(
            organization=self.organization,
            title=f"{self.title} - {data_subject.first_name} {data_subject.last_name}",
            document_type=self.document_type,
            is_template=False,
            content=self._populate_template_for_subject(data_subject),
            version='1.0',
            status='active',
            created_by=self.created_by,
            data_subject=data_subject,
        )
        
        return new_doc
    
    def _populate_template_for_subject(self, data_subject):
        """Substitute template variables with values from data subject"""
        content = self.content
        
        # Basic replacements
        replacements = {
            '{{subject_first_name}}': data_subject.first_name,
            '{{subject_last_name}}': data_subject.last_name,
            '{{subject_email}}': data_subject.email,
            '{{subject_full_name}}': f"{data_subject.first_name} {data_subject.last_name}",
            '{{organization_name}}': self.organization.name,
            '{{organization_address}}': self.organization.address,
            '{{current_date}}': timezone.now().strftime('%Y-%m-%d'),
            '{{expiry_date}}': data_subject.data_expiry_date.strftime('%Y-%m-%d') if data_subject.data_expiry_date else 'Not set',
        }
        
        # Apply all replacements
        for key, value in replacements.items():
            content = content.replace(key, value)
            
        return content


class ComplianceAction(models.Model):
    """Tracks compliance tasks and actions"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='compliance_actions')
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    priority = models.CharField(max_length=50, choices=[
        ('high', 'High'),
        ('medium', 'Medium'),
        ('low', 'Low')
    ], default='medium')
    status = models.CharField(max_length=50, choices=[
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('overdue', 'Overdue')
    ], default='pending')
    due_date = models.DateField(null=True, blank=True)
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='assigned_actions')
    completed_date = models.DateField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return self.title

class DataSubject(models.Model):
    """Individuals whose data is being processed"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='data_subjects')
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    phone = models.CharField(max_length=20, blank=True)
    
    # GDPR specific consent tracking
    marketing_consent = models.BooleanField(default=False)
    marketing_consent_date = models.DateTimeField(null=True, blank=True)
    data_processing_consent = models.BooleanField(default=False) 
    data_processing_consent_date = models.DateTimeField(null=True, blank=True)
    cookie_consent = models.BooleanField(default=False)
    cookie_consent_date = models.DateTimeField(null=True, blank=True)
    
    # Data retention tracking
    data_expiry_date = models.DateTimeField(null=True, blank=True)
    
    # Compliance related documents
    privacy_notice_version = models.CharField(max_length=20, blank=True)
    privacy_notice_accepted_date = models.DateTimeField(null=True, blank=True)
    
    # Optional notes
    notes = models.TextField(blank=True)
    
    # Fields for tracking when data was collected and updated
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.email})"
    
    def save(self, *args, **kwargs):
        # Update consent dates if consent status changed
        if self.pk:
            old_instance = DataSubject.objects.get(pk=self.pk)
            
            if old_instance.marketing_consent != self.marketing_consent and self.marketing_consent:
                self.marketing_consent_date = timezone.now()
                
            if old_instance.data_processing_consent != self.data_processing_consent and self.data_processing_consent:
                self.data_processing_consent_date = timezone.now()
                
            if old_instance.cookie_consent != self.cookie_consent and self.cookie_consent:
                self.cookie_consent_date = timezone.now()
                
        else:
            # New instance - set consent dates if consent is given
            if self.marketing_consent:
                self.marketing_consent_date = timezone.now()
            if self.data_processing_consent:
                self.data_processing_consent_date = timezone.now()
            if self.cookie_consent:
                self.cookie_consent_date = timezone.now()
                
        # Calculate data expiry date based on organization policy
        if self.data_processing_consent and not self.data_expiry_date:
            # Default to 2 years from consent date, but should be configurable per organization
            self.data_expiry_date = timezone.now() + timezone.timedelta(days=730)  # 2 years
                
        super().save(*args, **kwargs)
    
    def is_expired(self):
        """Check if data retention period has expired"""
        if not self.data_expiry_date:
            return False
        return timezone.now() >= self.data_expiry_date
    
    class Meta:
        verbose_name_plural = 'Data Subjects'
        unique_together = ['organization', 'email']


class ConsentActivity(models.Model):
    """Tracks history of all consent-related activities"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    data_subject = models.ForeignKey(DataSubject, on_delete=models.CASCADE, related_name='consent_activities')
    activity_type = models.CharField(max_length=100, choices=[
        ('consent_given', 'Consent Given'),
        ('consent_withdrawn', 'Consent Withdrawn'),
        ('privacy_notice_viewed', 'Privacy Notice Viewed'),
        ('privacy_notice_accepted', 'Privacy Notice Accepted'),
        ('data_accessed', 'Data Accessed'),
        ('data_updated', 'Data Updated'),
        ('data_deleted', 'Data Deleted'),
    ])
    consent_type = models.CharField(max_length=100, blank=True, choices=[
        ('marketing', 'Marketing'),
        ('data_processing', 'Data Processing'),
        ('cookies', 'Cookies'),
        ('other', 'Other')
    ])
    timestamp = models.DateTimeField(default=timezone.now)
    ip_address = models.GenericIPAddressField(null=True, blank=True)
    user_agent = models.TextField(blank=True)
    notes = models.TextField(blank=True)
    
    def __str__(self):
        return f"{self.activity_type} - {self.data_subject.email} - {self.timestamp.strftime('%Y-%m-%d %H:%M')}"
    
    class Meta:
        verbose_name_plural = 'Consent Activities'

class WorkflowTemplate(models.Model):
    """Templates for GDPR workflows with automated steps"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='workflow_templates')
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    workflow_type = models.CharField(max_length=100, choices=[
        ('subject_access', 'Subject Access Request'),
        ('erasure', 'Right to Erasure'),
        ('rectification', 'Data Rectification'),
        ('breach_notification', 'Data Breach Notification'),
        ('consent_withdrawal', 'Consent Withdrawal'),
        ('custom', 'Custom Workflow')
    ])
    estimated_completion_days = models.IntegerField(default=30)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} ({self.get_workflow_type_display()})"
    
    def create_workflow_instance(self, data_subject=None, request=None):
        """Create a new workflow instance from this template"""
        workflow = WorkflowInstance.objects.create(
            organization=self.organization,
            template=self,
            name=self.name,
            data_subject=data_subject,
            related_request=request,
            due_date=timezone.now() + timezone.timedelta(days=self.estimated_completion_days)
        )
        
        # Create all workflow steps from the template
        for step_template in self.step_templates.all().order_by('order'):
            WorkflowStep.objects.create(
                workflow=workflow,
                name=step_template.name,
                description=step_template.description,
                step_type=step_template.step_type,
                order=step_template.order,
                is_automated=step_template.is_automated,
                automation_script=step_template.automation_script,
                document_template=step_template.document_template
            )
        
        return workflow


class WorkflowStepTemplate(models.Model):
    """Templates for steps within workflow templates"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    workflow_template = models.ForeignKey(WorkflowTemplate, on_delete=models.CASCADE, related_name='step_templates')
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    step_type = models.CharField(max_length=100, choices=[
        ('collect_information', 'Collect Information'),
        ('verify_identity', 'Verify Identity'),
        ('search_data', 'Search for Data'),
        ('generate_document', 'Generate Document'),
        ('send_notification', 'Send Notification'),
        ('approval', 'Approval Step'),
        ('data_action', 'Data Action (e.g., deletion)'),
        ('custom', 'Custom Step')
    ])
    order = models.IntegerField(default=0)
    is_automated = models.BooleanField(default=False)
    automation_script = models.TextField(blank=True, help_text="Python script for automation if applicable")
    document_template = models.ForeignKey(Document, on_delete=models.SET_NULL, null=True, blank=True, 
                                         related_name='workflow_step_templates',
                                         help_text="Document template to use if this step generates a document")
    estimated_duration_hours = models.IntegerField(default=24)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} - {self.workflow_template.name}"
    
    class Meta:
        ordering = ['workflow_template', 'order']


class WorkflowInstance(models.Model):
    """Active workflow instances"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE, related_name='workflow_instances')
    template = models.ForeignKey(WorkflowTemplate, on_delete=models.SET_NULL, null=True, related_name='instances')
    name = models.CharField(max_length=255)
    status = models.CharField(max_length=50, choices=[
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled')
    ], default='pending')
    data_subject = models.ForeignKey('DataSubject', on_delete=models.SET_NULL, null=True, blank=True, 
                                    related_name='workflows')
    related_request = models.ForeignKey(DataSubjectRequest, on_delete=models.SET_NULL, null=True, blank=True,
                                       related_name='workflows')
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, 
                                   related_name='assigned_workflows')
    start_date = models.DateTimeField(auto_now_add=True)
    due_date = models.DateTimeField()
    completed_date = models.DateTimeField(null=True, blank=True)
    current_step = models.ForeignKey('WorkflowStep', on_delete=models.SET_NULL, null=True, blank=True,
                                    related_name='current_for_workflows')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} ({self.get_status_display()})"
    
    def advance_to_next_step(self):
        """Move to the next step in the workflow"""
        if self.status != 'in_progress':
            self.status = 'in_progress'
            
        # Mark current step as completed if it exists
        if self.current_step:
            self.current_step.status = 'completed'
            self.current_step.completed_date = timezone.now()
            self.current_step.save()
            
        # Find the next uncompleted step
        next_step = self.steps.filter(status='pending').order_by('order').first()
        
        if next_step:
            next_step.status = 'in_progress'
            next_step.start_date = timezone.now()
            next_step.save()
            self.current_step = next_step
            self.save()
            
            # If the step is automated, execute it
            if next_step.is_automated:
                next_step.execute_automation()
        else:
            # No more steps, workflow is complete
            self.status = 'completed'
            self.completed_date = timezone.now()
            self.current_step = None
            self.save()
            
        return self.current_step
    
    def get_progress_percentage(self):
        """Calculate workflow completion percentage"""
        total_steps = self.steps.count()
        if total_steps == 0:
            return 0
        
        completed_steps = self.steps.filter(status='completed').count()
        return int((completed_steps / total_steps) * 100)


class WorkflowStep(models.Model):
    """Individual steps within a workflow instance"""
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    workflow = models.ForeignKey(WorkflowInstance, on_delete=models.CASCADE, related_name='steps')
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    step_type = models.CharField(max_length=100, choices=[
        ('collect_information', 'Collect Information'),
        ('verify_identity', 'Verify Identity'),
        ('search_data', 'Search for Data'),
        ('generate_document', 'Generate Document'),
        ('send_notification', 'Send Notification'),
        ('approval', 'Approval Step'),
        ('data_action', 'Data Action (e.g., deletion)'),
        ('custom', 'Custom Step')
    ])
    order = models.IntegerField(default=0)
    is_automated = models.BooleanField(default=False)
    automation_script = models.TextField(blank=True)
    document_template = models.ForeignKey(Document, on_delete=models.SET_NULL, null=True, blank=True,
                                         related_name='workflow_steps')
    status = models.CharField(max_length=50, choices=[
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
        ('skipped', 'Skipped')
    ], default='pending')
    assigned_to = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, 
                                   related_name='assigned_steps')
    start_date = models.DateTimeField(null=True, blank=True)
    due_date = models.DateTimeField(null=True, blank=True)
    completed_date = models.DateTimeField(null=True, blank=True)
    result_notes = models.TextField(blank=True)
    generated_document = models.ForeignKey(Document, on_delete=models.SET_NULL, null=True, blank=True,
                                          related_name='generated_from_steps')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} - {self.workflow.name}"
    
    def execute_automation(self):
        """Execute the automation for this step"""
        try:
            if self.step_type == 'generate_document' and self.document_template:
                # Generate document using template
                if self.document_template.is_template and self.workflow.data_subject:
                    generated_doc = self.document_template.generate_document_for_subject(self.workflow.data_subject)
                    self.generated_document = generated_doc
                    self.result_notes = f"Document generated successfully: {generated_doc.title}"
                    self.status = 'completed'
                    self.completed_date = timezone.now()
                    self.save()
                    
                    # Move workflow to next step
                    self.workflow.advance_to_next_step()
                    return True
            
            # More automation types can be added here
            
            self.result_notes = "Automation not implemented for this step type"
            self.status = 'failed'
            self.save()
            return False
            
        except Exception as e:
            self.result_notes = f"Automation failed: {str(e)}"
            self.status = 'failed'
            self.save()
            return False
    
    class Meta:
        ordering = ['workflow', 'order']